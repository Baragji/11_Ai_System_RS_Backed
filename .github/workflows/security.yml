name: security-verification

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  actions: read
  contents: read
  security-events: write
  id-token: write
  attestations: write

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  semgrep:
    name: Semgrep Scan
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/ci"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      - name: Upload Semgrep SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  dependency-security:
    name: Dependency Security
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Run npm audit
        run: npm audit --audit-level=high --production
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          scan-ref: '.'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          format: sarif
          output: trivy-results.sarif
      - name: Upload Trivy results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  container-build:
    name: Build, SBOM, Sign and Attest
    runs-on: ubuntu-22.04
    needs:
      - dependency-security
    outputs:
      image: ${{ steps.image_ref.outputs.image }}
    env:
      IMAGE_NAME: ghcr.io/prod-ai/platform-api
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm ci
      - name: Build application
        run: npm run build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          file: ./Dockerfile
      - name: Generate CycloneDX SBOM
        run: npx @cyclonedx/cyclonedx-npm --output-format json --output-file sbom.cdx.json
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: cyclonedx-sbom
          path: sbom.cdx.json
      - name: Run Syft container SBOM
        uses: anchore/syft-action@v1
        with:
          image: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: cyclonedx-json
          output: image.cdx.json
      - name: Upload image SBOM
        uses: actions/upload-artifact@v4
        with:
          name: container-sbom
          path: image.cdx.json
      - name: Trivy image scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          ignore-unfixed: true
      - name: Cosign Sign Container
        env:
          COSIGN_EXPERIMENTAL: "1"
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "$COSIGN_PRIVATE_KEY" > cosign.key
          cosign sign --key cosign.key --yes $IMAGE_NAME:${{ github.sha }}
      - name: Generate SLSA Provenance
        uses: slsa-framework/slsa-github-generator/actions/nodejs@v2
        with:
          compile-builder: true
          upload-assets: true
      - name: Cosign Attest SBOM
        env:
          COSIGN_EXPERIMENTAL: "1"
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          cosign attest --predicate sbom.cdx.json --type cyclonedx --key cosign.key $IMAGE_NAME:${{ github.sha }}
      - name: Export image reference
        id: image_ref
        run: echo "image=${IMAGE_NAME}:${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

  policy-gate:
    name: Policy Gate
    runs-on: ubuntu-22.04
    needs:
      - container-build
    env:
      IMAGE_NAME: ghcr.io/prod-ai/platform-api
    steps:
      - uses: actions/checkout@v4
      - name: Verify Cosign signature
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: cosign verify ${{ needs.container-build.outputs.image }}
      - name: Fail if attestation missing
        run: |
          cosign verify-attestation --type cyclonedx --certificate-identity-regexp ".*" --certificate-oidc-issuer https://token.actions.githubusercontent.com $IMAGE_NAME:${{ github.sha }}
