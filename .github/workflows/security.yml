name: security-verification

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  actions: read
  contents: read
  security-events: write
  id-token: write
  packages: write
  attestations: write

jobs:
  semgrep:
    name: Semgrep Scan
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Install Semgrep
        run: |
          python -m pip install --upgrade pip
          python -m pip install semgrep
      - name: Run Semgrep
        run: semgrep --config "p/ci" --sarif --output=semgrep.sarif
      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  dependency-security:
    name: Dependency Security
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Run npm audit
        run: npm audit --audit-level=high
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          format: sarif
          output: trivy-results.sarif
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  container-build:
    name: Build, SBOM, Sign and Attest
    runs-on: ubuntu-22.04
    needs:
      - dependency-security
    outputs:
      image: ${{ steps.image_ref.outputs.image_name }}:${{ github.sha }}
      image_name: ${{ steps.image_ref.outputs.image_name }}
      digest: ${{ steps.image_ref.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
      - name: Set IMAGE_NAME
        shell: bash
        run: echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/platform-api" >> "$GITHUB_ENV"
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm ci
      - name: Build application
        run: npm run build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Validate push permissions
        if: github.event_name == 'push'
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Image Name: ${IMAGE_NAME}"
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"
          
          # Verify we're pushing to the correct namespace (lowercased owner)
          if [[ "${IMAGE_NAME}" != "ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/platform-api" ]]; then
            echo "❌ Error: IMAGE_NAME mismatch. Expected ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/platform-api, got ${IMAGE_NAME}"
            exit 1
          fi
          
          echo "✅ Push validation passed"

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build container image
        id: build
        uses: docker/build-push-action@v5
        with:
          push: ${{ github.event_name == 'push' }}
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          file: ./Dockerfile
      - name: Generate CycloneDX SBOM
        run: npx @cyclonedx/cyclonedx-npm --output-format json --output-file sbom.cdx.json
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: cyclonedx-sbom
          path: sbom.cdx.json
      - name: Run Syft container SBOM
        if: github.event_name == 'push'
        shell: bash
        run: |
          set -euo pipefail
          # Install Syft (Anchore) and generate CycloneDX SBOM for the built image
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          /usr/local/bin/syft ${{ env.IMAGE_NAME }}:${{ github.sha }} -o cyclonedx-json > image.cdx.json
          if [ ! -s image.cdx.json ]; then
            echo "Syft did not produce image.cdx.json or file is empty"
            exit 1
          fi
      - name: Upload image SBOM
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: container-sbom
          path: image.cdx.json
      - name: Ensure jq is installed
        if: github.event_name == 'push'
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Generate Syft JSON for license diagnostics
        if: github.event_name == 'push'
        shell: bash
        run: |
          set -euo pipefail
          echo "Generating Syft JSON for ${{ env.IMAGE_NAME }}:${{ github.sha }}"
          /usr/local/bin/syft ${{ env.IMAGE_NAME }}:${{ github.sha }} -o json > image.syft.json
          if [ ! -s image.syft.json ]; then
            echo "Syft did not produce image.syft.json or file is empty"
            exit 1
          fi

      - name: Print license diagnostics (name, version, licenses, paths)
        if: github.event_name == 'push'
        shell: bash
        run: |
          set -euo pipefail
          test -s image.syft.json || { echo "image.syft.json missing before jq"; exit 1; }
          jq -r '
            .artifacts[] as $a
            | [$a.name, $a.version, ($a.licenses // [] | map(.value) | join("|")), ($a.locations // [] | map(.path) | join("|"))]
            | @tsv
          ' image.syft.json | awk -F'\t' 'BEGIN{printf("%-40s %-20s %-25s %s\n","NAME","VERSION","LICENSES","PATHS"); print "--------------------------------------------------------------------------------------------------------------------------------"} {printf("%-40s %-20s %-25s %s\n",$1,$2,$3,$4)}'
      - name: Upload Syft JSON artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-syft-json
          path: image.syft.json
      - name: Trivy image scan
        if: github.event_name == 'push'
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          ignore-unfixed: true
      - name: Install Cosign
        if: github.event_name == 'push'
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.4.1'
      - name: Verify Cosign Installed
        if: github.event_name == 'push'
        run: cosign version
      - name: Cosign Sign Container (keyless)
        if: github.event_name == 'push'
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          cosign sign --yes $IMAGE_NAME@${{ steps.build.outputs.digest }}

      - name: Cosign Attest SBOM (keyless)
        if: github.event_name == 'push'
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          cosign attest --yes --predicate sbom.cdx.json --type cyclonedx $IMAGE_NAME@${{ steps.build.outputs.digest }}
      - name: Export image reference
        id: image_ref
        run: |
          echo "image_name=${IMAGE_NAME}" >> "$GITHUB_OUTPUT"
          echo "digest=${{ steps.build.outputs.digest }}" >> "$GITHUB_OUTPUT"

  generate-slsa:
    name: Generate SLSA Provenance
    if: github.event_name == 'push'
    needs: container-build
    permissions:
      actions: read
      id-token: write
      packages: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0
    with:
      image: ${{ needs.container-build.outputs.image_name }}
      digest: ${{ needs.container-build.outputs.digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  policy-gate:
    name: Policy Gate
    if: github.event_name == 'push'
    runs-on: ubuntu-22.04
    needs:
      - container-build
      - generate-slsa
    steps:
      - uses: actions/checkout@v4
      - name: Set IMAGE_NAME
        shell: bash
        run: echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/platform-api" >> "$GITHUB_ENV"
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.4.1'
      - name: Verify Cosign Installed
        run: cosign version
      - name: Verify Cosign signature (keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: cosign verify ${{ needs.container-build.outputs.image }}@${{ needs.container-build.outputs.digest }}
      - name: Fail if attestation missing
        run: |
          # Extra guard: ensure IMAGE_NAME owner is lowercase (docker requires lowercase repository names)
          OWNER_PART=$(echo "$IMAGE_NAME" | awk -F'/' '{print $2}')
          if [[ "$OWNER_PART" =~ [A-Z] ]]; then
            echo "❌ IMAGE_NAME owner contains uppercase letters: $OWNER_PART"
            echo "    Ensure the owner is lowercased (e.g., use \"${GITHUB_REPOSITORY_OWNER,,}\" when constructing IMAGE_NAME)"
            exit 1
          fi

          cosign verify-attestation --type cyclonedx --certificate-identity-regexp ".*" --certificate-oidc-issuer https://token.actions.githubusercontent.com $IMAGE_NAME@${{ needs.container-build.outputs.digest }}
